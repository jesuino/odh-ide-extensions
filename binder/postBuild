#!/usr/bin/env python3
""" perform a development install of odh_jupyter_trash_cleanup

    On Binder, this will run _after_ the environment has been fully created from
    the environment.yml in this directory.

    This script should also run locally on Linux/MacOS/Windows:

        python3 binder/postBuild
"""
import subprocess
import sys
import json
from pathlib import Path

ROOT = Path.cwd()

def read_workspaces(package_json_path):
    """Reads the list of workspaces from a given package.json file"""
    with open(package_json_path, "r", encoding="utf-8") as file:
        data = json.load(file)

    if "workspaces" in data:
        return data["workspaces"]
    else:
        return []

def _(*args, **kwargs):
    """ Run a command, echoing the args

        fails hard if something goes wrong
    """
    print("\n\t", " ".join(args), "\n")
    return_code = subprocess.call(args, **kwargs)
    if return_code != 0:
        print("\nERROR", return_code, " ".join(args))
        sys.exit(return_code)

# verify the environment is self-consistent before even starting
_(sys.executable, "-m", "pip", "check")

extensions = read_workspaces("package.json")

for extension in extensions:
    # install the labextensions
    print(f"INSTALLING:  {extension}")
    _(sys.executable, "-m", "pip", "install", "-e", extension)
    _(sys.executable, "-m", "jupyter", "labextension", "develop", "--overwrite", extension)
    PYTHON_NAME = extension.replace("-", "_")
    _(sys.executable, "-m", "jupyter", "server", "extension", "enable", PYTHON_NAME)

# verify the environment the extension didn't break anything
_(sys.executable, "-m", "pip", "check")

# list the extensions
_("jupyter", "server", "extension", "list")

# initially list installed extensions to determine if there are any surprises
_("jupyter", "labextension", "list")


print("JupyterLab with odh_jupyter_trash_cleanup is ready to run with:\n")
print("\tjupyter lab\n")
